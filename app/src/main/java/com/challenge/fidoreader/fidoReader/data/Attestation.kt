package com.challenge.fidoreader.fidoReader.data

import com.challenge.fidoreader.Util.hexStringToByteArray
import com.challenge.fidoreader.fidoReader.data.Attestation.Companion.U2F_RAW_BATCH_ATTESTATION_KEY
import java.security.KeyFactory
import java.security.Signature
import java.security.spec.PKCS8EncodedKeySpec

class Attestation {
    var FULL_ATTESTATION_CERT: ByteArray
    var FULL_ATTESTATION_CA_CERT: ByteArray
    var U2F_RAW_BATCH_ATTESTATION_CERT: ByteArray

    companion object {
        // A777BFFBDDCD6325382448C2320D68D9E4E556A38A508ED783C7A1E4BACFF14E
        val FULL_ATTESTATION_PRIVATE_KEY = byteArrayOf(
                0xA7.toByte(), 0x77.toByte(), 0xBF.toByte(), 0xFB.toByte(), 0xDD.toByte(), 0xCD.toByte(),
                0x63.toByte(), 0x25.toByte(), 0x38.toByte(), 0x24.toByte(), 0x48.toByte(), 0xC2.toByte(),
                0x32.toByte(), 0x0D.toByte(), 0x68.toByte(), 0xD9.toByte(), 0xE4.toByte(), 0xE5.toByte(),
                0x56.toByte(), 0xA3.toByte(), 0x8A.toByte(), 0x50.toByte(), 0x8E.toByte(), 0xD7.toByte(),
                0x83.toByte(), 0xC7.toByte(), 0xA1.toByte(), 0xE4.toByte(), 0xBA.toByte(), 0xCF.toByte(),
                0xF1.toByte(), 0x4E.toByte()
        )

        val U2F_RAW_BATCH_ATTESTATION_KEY = ubyteArrayOf(
                0xC0u, 0xEEu, 0xE9u, 0xCAu, 0x76u, 0xD5u, 0xB2u, 0x88u, 0xE2u, 0x9Du, 0xE7u, 0x35u, 0x0Cu,
                0x75u, 0xD2u, 0x32u, 0xA7u, 0x35u, 0x24u, 0x49u, 0xB1u, 0xA4u, 0x77u, 0xB7u, 0x32u, 0x2Cu,
                0xA5u, 0x2Cu, 0x4Au, 0x00u, 0xBAu, 0x68u
        ).toByteArray()

        const val
        const val
        const val
    }

    init {
        FULL_ATTESTATION_CERT = STRING_FULL_ATTESTATION_CERT.hexStringToByteArray()
        FULL_ATTESTATION_CA_CERT = STRING_FULL_ATTESTATION_CA_CERT.hexStringToByteArray()
        U2F_RAW_BATCH_ATTESTATION_CERT = STRING_U2F_RAW_BATCH_ATTESTATION_CERT.hexStringToByteArray()
    }
}

@ExperimentalUnsignedTypes
private val U2F_BATCH_ATTESTATION_KEY by lazy {
    KeyFactory.getInstance("EC").generatePrivate(
            PKCS8EncodedKeySpec(U2F_RAW_BATCH_ATTESTATION_KEY))
}

@ExperimentalUnsignedTypes
fun signWithU2fBatchAttestationKey(vararg data: ByteArray): ByteArray {
    val sign = Signature.getInstance("SHA256withECDSA")
    sign.initSign(U2F_BATCH_ATTESTATION_KEY)
    for (datum in data) {
        sign.update(datum)
    }
    return sign.sign()
}
